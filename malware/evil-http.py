from http.server import BaseHTTPRequestHandler, HTTPServer
import fire


global gfile
class CustomHTTPRequestHandler(BaseHTTPRequestHandler):

        
    def do_GET(self):
        # if self.path == '/file.hta':
        #     self.send_response(200)
        #     self.send_header('Content-type', 'application/hta')
        #     self.send_header('Content-Disposition', 'attachment; filename="file.hta"')
        #     self.end_headers()

        #     with open('file.hta', 'rb') as file:
        #         self.wfile.write(file.read())
        # else:
        #     self.send_response(404)
        #     self.end_headers()
        #     self.wfile.write(b'File not found')
         
        self.file = gfile
        self.send_response(200)
        self.send_header('Content-type', 'application/hta')
        self.send_header('Content-Disposition', 'attachment; filename="{}"'.format(self.file))
        self.end_headers()

        with open('{}'.format(self.file), 'rb') as file:
            self.wfile.write(file.read())


    def log_message(self, format, *args):
        return


def expose_file(host, port, file):
    global gfile
    gfile=file
    server = HTTPServer((host, port), CustomHTTPRequestHandler)
    print(f'HTTP server started on http://{host}:{port}')

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass

    server.server_close()
    print('Server stopped')


if __name__ == '__main__':
    fire.Fire(
        {"exposefile": expose_file}
    )
